// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var ReactDOMRe = require("reason-react/src/ReactDOMRe.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var component = ReasonReact.statelessComponent("TodoAppItem");

function make(task, checked, onChange, _children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (_self) {
              return React.createElement("li", undefined, checked ? React.createElement("del", undefined, task) : task, React.createElement("input", {
                              checked: checked,
                              type: "checkbox",
                              onChange: onChange
                            }));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

var TodoAppItem = /* module */[
  /* component */component,
  /* make */make
];

var component$1 = ReasonReact.reducerComponent("TodoApp");

function make$1(_children) {
  var setRef = function (theRef, param) {
    param[/* state */1][/* inputRef */2][0] = (theRef == null) ? undefined : Caml_option.some(theRef);
    return /* () */0;
  };
  var handleAdd = function (_evt, self) {
    var match = self[/* state */1][/* inputRef */2][0];
    if (match !== undefined) {
      var r = Caml_option.valFromOption(match);
      var value = r.value;
      if (value === "") {
        return /* () */0;
      } else {
        Curry._1(self[/* send */3], /* AddTodo */Block.__(0, [r.value]));
        return Curry._1(self[/* send */3], /* ToggleForm */0);
      }
    } else {
      return /* () */0;
    }
  };
  var showForm = function (self) {
    return React.createElement("div", undefined, React.createElement("label", undefined, "Task Name: "), React.createElement("input", {
                    ref: Curry._1(self[/* handle */0], setRef),
                    type: "text"
                  }), React.createElement("button", {
                    type: "button",
                    onClick: Curry._1(self[/* handle */0], handleAdd)
                  }, "Add"));
  };
  return /* record */[
          /* debugName */component$1[/* debugName */0],
          /* reactClassInternal */component$1[/* reactClassInternal */1],
          /* handedOffState */component$1[/* handedOffState */2],
          /* willReceiveProps */component$1[/* willReceiveProps */3],
          /* didMount */component$1[/* didMount */4],
          /* didUpdate */component$1[/* didUpdate */5],
          /* willUnmount */component$1[/* willUnmount */6],
          /* willUpdate */component$1[/* willUpdate */7],
          /* shouldUpdate */component$1[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = self[/* state */1][/* formToggle */1];
              return React.createElement("div", undefined, React.createElement("h1", undefined, "Todo:"), React.createElement("ul", undefined, $$Array.mapi((function (idx, item) {
                                    return ReasonReact.element(String(idx) + ("-" + item[/* name */0]), undefined, make(item[/* name */0], item[/* complete */1], Curry._1(self[/* handle */0], (function (param, param$1) {
                                                          return Curry._1(param$1[/* send */3], /* ToggleTodo */Block.__(1, [idx]));
                                                        })), /* array */[]));
                                  }), self[/* state */1][/* todos */0])), match ? showForm(self) : React.createElement("button", {
                                type: "button",
                                onClick: (function (_evt) {
                                    return Curry._1(self[/* send */3], /* ToggleForm */0);
                                  })
                              }, "Add Todo"));
            }),
          /* initialState */(function (param) {
              return /* record */[
                      /* todos : array */[/* record */[
                          /* name */"Add some todos",
                          /* complete */false
                        ]],
                      /* formToggle : ShowButton */0,
                      /* inputRef : record */[/* contents */undefined]
                    ];
            }),
          /* retainedProps */component$1[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                var match = state[/* formToggle */1];
                var newFormToggle = match ? /* ShowButton */0 : /* ShowForm */1;
                return /* Update */Block.__(0, [/* record */[
                            /* todos */state[/* todos */0],
                            /* formToggle */newFormToggle,
                            /* inputRef */state[/* inputRef */2]
                          ]]);
              } else if (action.tag) {
                var idx = action[0];
                Caml_array.caml_array_get(state[/* todos */0], idx)[/* complete */1] = !Caml_array.caml_array_get(state[/* todos */0], idx)[/* complete */1];
                return /* Update */Block.__(0, [state]);
              } else {
                return /* Update */Block.__(0, [/* record */[
                            /* todos */$$Array.append(state[/* todos */0], /* array */[/* record */[
                                    /* name */action[0],
                                    /* complete */false
                                  ]]),
                            /* formToggle */state[/* formToggle */1],
                            /* inputRef */state[/* inputRef */2]
                          ]]);
              }
            }),
          /* jsElementWrapped */component$1[/* jsElementWrapped */13]
        ];
}

var TodoApp = /* module */[
  /* component */component$1,
  /* make */make$1
];

ReactDOMRe.renderToElementWithId(ReasonReact.element(undefined, undefined, make$1(/* array */[])), "app");

exports.TodoAppItem = TodoAppItem;
exports.TodoApp = TodoApp;
/* component Not a pure module */
